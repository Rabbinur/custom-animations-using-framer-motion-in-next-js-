"use client";
import { motion, useInView, useAnimation, Variant } from "framer-motion";
import { useEffect, useRef } from "react";
import { AnimatePresence } from "framer-motion";
import React from "react";
import { fadeIn, portfolios } from "../../constants";
import Image from "next/image";
import Button from "./Button";
import Link from "next/link";
const defaultAnimations = {
  initial: {
    opacity: 0,
    y: -20,
  },
  animate: (index) => ({
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.05 * index,
    },
  }),
};
const PortfolioCategory = () => {
  const ref = useRef(null);
  const isInView = useInView(ref, { amount: 0.5, once: true });

  const [selectedCategory, setSelectedCategory] = React.useState("All");

  const categories = [
    "All",
    ...new Set(portfolios.map((portfolio) => portfolio.category)),
  ];

  const filteredPortfolios =
    selectedCategory === "All"
      ? portfolios
      : portfolios.filter(
          (portfolio) => portfolio.category === selectedCategory
        );
  return (
    <div>
      <motion.div ref={ref} className="flexCenter flex-col md:flex-row py-10">
        {categories.map((category, i) => (
          <motion.button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className={`
            ${
              selectedCategory === category
                ? "rounded-2xl px-5 py-1 border border-red-500  mx-2 "
                : "px-5 py-1"
            } hover:border-red-300 rounded-2xl px-5 py-1 duration-300  mx-2 hover:border 
            `}
            variants={defaultAnimations}
            initial="initial"
            whileInView="animate"
            viewport={{ once: false, amount: 0.5 }}
            custom={i}
            transition={{ staggerChildren: 0.1 }}
          >
            {category}
          </motion.button>
        ))}
      </motion.div>

      <div ref={ref} className="grid-cols-1 grid md:grid-cols-2
      xl:grid-cols-3 gap-10 py-5">
        {" "}
        {filteredPortfolios.map((item, i) => {
          return (
            <motion.div
              initial="initial"
              whileInView="animate"
              viewport={{ once: false, amount: 0.6 }}
              custom={i}
              variants={defaultAnimations}
              key={item.id}
              className=" h-fit group"
            >
              <motion.div
                initial="initial"
                whileInView="animate"
                viewport={{ once: false }}
                custom={i}
                transition={{ staggerChildren: 0.1 }}
                variants={defaultAnimations}
                className="relative overflow-hidden"
              >
                <Image
                  src={item.url}
                  alt={` ${item.title}`}
                  className=" h-[300px] object-cover "
                />
                <div className="absolute h-full w-full bg-black/20 flex flex-col items-center justify-center -bottom-10 group-hover:bottom-0 opacity-0 group-hover:opacity-100 transition-all duration-300">
                  <p className=" text-white py-2 px-5">{item.title}</p>
                  <Link href={`portfolio/${item.id}`}>
                    {" "}
                    <Button
                      className={`bg-black text-white py-2 px-5`}
                      title="See More"
                    />
                  </Link>
                </div>
              </motion.div>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
};

export default PortfolioCategory;
